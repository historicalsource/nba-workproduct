DEFINITION	/* ALIAS SDL File Version 8.5 */
			/* Apparently from wire file '/matt/mgilmore/user_data/NBAonNBC/wire/FX/hoopfire/hoopfire5c'. */
	version = 8.5;

	xleft  = 0;
	xright = 319;
	ylow   = 0;
	yhigh  = 239;
	resolution = 320 240;
	aalevelmin   = 0;
	aalevelmax   = 4;
	aathreshold  = 0.7;
	post_filter   = OFF;
	post_center   = 8;    /* Values for a bartlet filter. */
	post_adjacent = 1;
	post_diagonal = 1;

	composite_rendering = OFF;
	invisible_objects_cast_shadows = OFF;
	image_format = ALIAS;
	jitter       = ON;
	reduced_samples = OFF;
	textures_active    = ON;

	clamp_bumpsize = 0.0;

	up = yaxis;

	motion_blur_on = OFF;
	shutter_angle  = 144.0;
	animation  = ON;
	startframe      = 1.0;
	endframe        = 30.0;
	byframe         = 1.0;

	fields          = FALSE;
	odd             = FALSE;
	even            = FALSE;
	odd_field_first = TRUE;

	triple Camera_view(0.0, 0.0, 0.0);
	triple Camera_up(0.0, 0.0, 0.0);

	subdivision_recursion_limit = 2;
	grid_cache = 4000;
	bbox_memory = FULL;
	rt_voxel_res_type = AUTOMATIC;

	max_reflections             = 10;
	max_refractions             = 10;
	max_shadow_level            = 10;
	preview_ray_trace           = OFF;

	scalar pixel_aspect ( 1.0 );
	hline_to_fill_color  = FALSE;
	hline_fill_color     = (255.0, 255.0, 255.0);
	hline_line_color     = (0.0, 255.0, 255.0);
	hline_isoparam_u     = 0;
	hline_isoparam_v     = 0;

	show_particles       = TRUE;
	simulation_substeps  = 1;
	simulation_frames_per_second = 30;


texture File (
        procedure = file,
        rgbout = (0.0, 0.0, 0.0),
        active = ON,
        image = "/matt/mgilmore/user_data/NBAonNBC/pix/brst0001.tif",
        use_extension = OFF,
        frame_extension = 1,
        filter =  BLEND_FILTER,
        cache = OFF,
        rgbmult = (1.0, 1.0, 1.0),
        rgboffset = (0.0, 0.0, 0.0),
        blurmult = 1.0,
        bluroffset = 0.0,
        rotate = 0.0,
        urepeat = 1.0,
        vrepeat = 1.0,
        uoffset = 0.0,
        voffset = 0.0,
        mirror = OFF,
        stagger = OFF,
        worldspace = OFF,
        chord_length = OFF,
        ucoverage = 1.0,
        vcoverage = 1.0,
        utranslate = 0.0,
        vtranslate = 0.0,
        uwrap = ON,
        vwrap = ON,
        invert = OFF
);

shader Firetest3 ( model = lambert,
        diffuse = 0.0,
        color = File,
        incandescence = (0.0, 0.0, 0.0),
        transparency = (0.0, 0.0, 0.0),
        shading_map = (0.0, 0.0, 0.0),
        translucence = 0.0,
        translucence_depth = 0.5,
        opacity_depth = 0.0,
        use_background_color = OFF,
        matte_fraction = 0.0,
        psys_emission = OFF,
        glow_intensity = 0.0,
        hide_glow_source = OFF,
        refractive_index = 1.6,
        reflection_limit = 1,
        refraction_limit = 6,
        shadow_level_limit = 0,
        surface_width = 0.0,
        transparency_shade = 0.0,
        transparency_depth = 0.0,
        chromatic_abberation = 0.0,
        refraction_jitter = 0.0,
        refraction_samples = 0,
        respect_reflection_map = OFF,
        use_fill_color = ON,
        fill_color = (255.0, 255.0, 255.0),
        u_patch_lines = 0,
        v_patch_lines = 0,
        density = 1.0,
        elasticity = 0.707,
        friction = 0.0,
        drag_coeff = 0.5
);

polyset hoopfire1 (
	active = ON,
	motion_blur = ON,
	smooth = ON,
	doublesided = OFF,
	opposite = OFF,
	shader = (Firetest3 ),
	casts_shadow = TRUE,
	vertices = ((cv((-6.784144, 1.915907, 0.115542), 1)),
			(cv((-6.748985, 2.368995, 0.242406), 1)),
			(cv((-6.627782, 2.368995, 0.20993), 1)),
			(cv((-6.726373, 1.915907, 0.100062), 1)),
			(cv((-6.684082, 1.915907, 0.057771), 1)),
			(cv((-6.539055, 2.368995, 0.121203), 1)),
			(cv((-6.506579, 2.368995, 0.0), 1)),
			(cv((-6.668602, 1.915907, 0.0), 1)),
			(cv((-6.539055, 2.368995, -0.121203), 1)),
			(cv((-6.684082, 1.915907, -0.057771), 1)),
			(cv((-6.627782, 2.368995, -0.20993), 1)),
			(cv((-6.726373, 1.915907, -0.100062), 1)),
			(cv((-6.748985, 2.368995, -0.242406), 1)),
			(cv((-6.784144, 1.915907, -0.115542), 1)),
			(cv((-6.870188, 2.368995, -0.20993), 1)),
			(cv((-6.841915, 1.915907, -0.100062), 1)),
			(cv((-6.899686, 1.915907, 0.0), 1)),
			(cv((-6.991391, 2.368995, 0.0), 1)),
			(cv((-6.958915, 2.368995, 0.121203), 1)),
			(cv((-6.884206, 1.915907, 0.057771), 1)),
			(cv((-6.870188, 2.368995, 0.20993), 1)),
			(cv((-6.841915, 1.915907, 0.100062), 1)),
			(cv((-6.958915, 2.368995, -0.121203), 1)),
			(cv((-6.884206, 1.915907, -0.057771), 1)),
			(cv((-6.627782, 2.368995, 0.20993), 1)),
			(cv((-6.748985, 2.368995, 0.242406), 1)),
			(cv((-6.784144, 1.915907, 0.115542), 1)),
			(cv((-6.726373, 1.915907, 0.100062), 1)),
			(cv((-6.506579, 2.368995, 0.0), 1)),
			(cv((-6.539055, 2.368995, 0.121203), 1)),
			(cv((-6.684082, 1.915907, 0.057771), 1)),
			(cv((-6.668602, 1.915907, 0.0), 1)),
			(cv((-6.539055, 2.368995, -0.121203), 1)),
			(cv((-6.684082, 1.915907, -0.057771), 1)),
			(cv((-6.627782, 2.368995, -0.20993), 1)),
			(cv((-6.726373, 1.915907, -0.100062), 1)),
			(cv((-6.748985, 2.368995, -0.242406), 1)),
			(cv((-6.784144, 1.915907, -0.115542), 1)),
			(cv((-6.870188, 2.368995, -0.20993), 1)),
			(cv((-6.841915, 1.915907, -0.100062), 1)),
			(cv((-6.958915, 2.368995, 0.121203), 1)),
			(cv((-6.991391, 2.368995, 0.0), 1)),
			(cv((-6.899686, 1.915907, 0.0), 1)),
			(cv((-6.884206, 1.915907, 0.057771), 1)),
			(cv((-6.870188, 2.368995, 0.20993), 1)),
			(cv((-6.841915, 1.915907, 0.100062), 1)),
			(cv((-6.958915, 2.368995, -0.121203), 1)),
			(cv((-6.884206, 1.915907, -0.057771), 1))	),
	texture_vertices = (
			st( 0.500000, 0.000000 ),
			st( 0.500000, 1.000000 ),
			st( 0.416666, 1.000000 ),
			st( 0.416666, 0.000000 ),
			st( 0.333330, 0.000000 ),
			st( 0.333330, 1.000000 ),
			st( 0.250000, 1.000000 ),
			st( 0.250000, 0.000000 ),
			st( 0.166667, 1.000000 ),
			st( 0.166667, 0.000000 ),
			st( 0.083333, 1.000000 ),
			st( 0.083333, 0.000000 ),
			st( 0.000000, 1.000000 ),
			st( 1.000000, 1.000000 ),
			st( 0.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 0.916667, 1.000000 ),
			st( 0.916667, 0.000000 ),
			st( 0.750000, 0.000000 ),
			st( 0.750000, 1.000000 ),
			st( 0.666666, 1.000000 ),
			st( 0.666666, 0.000000 ),
			st( 0.583333, 1.000000 ),
			st( 0.583333, 0.000000 ),
			st( 0.833333, 1.000000 ),
			st( 0.833333, 0.000000 ),
			st( 0.416666, 1.000000 ),
			st( 0.500000, 1.000000 ),
			st( 0.500000, 0.000000 ),
			st( 0.416666, 0.000000 ),
			st( 0.250000, 1.000000 ),
			st( 0.333330, 1.000000 ),
			st( 0.333330, 0.000000 ),
			st( 0.250000, 0.000000 ),
			st( 0.166667, 1.000000 ),
			st( 0.166667, 0.000000 ),
			st( 0.083333, 1.000000 ),
			st( 0.083333, 0.000000 ),
			st( 0.000000, 1.000000 ),
			st( 1.000000, 1.000000 ),
			st( 0.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 0.916667, 1.000000 ),
			st( 0.916667, 0.000000 ),
			st( 0.666666, 1.000000 ),
			st( 0.750000, 1.000000 ),
			st( 0.750000, 0.000000 ),
			st( 0.666666, 0.000000 ),
			st( 0.583333, 1.000000 ),
			st( 0.583333, 0.000000 ),
			st( 0.833333, 1.000000 ),
			st( 0.833333, 0.000000 ) ),
	polygons = (
		polygon ((0, 1, 2),(0, 1, 2), 0 ),
		polygon ((2, 3, 0),(2, 3, 0), 0 ),
		polygon ((4, 5, 6),(4, 5, 6), 0 ),
		polygon ((6, 7, 4),(6, 7, 4), 0 ),
		polygon ((7, 6, 8),(7, 6, 8), 0 ),
		polygon ((8, 9, 7),(8, 9, 7), 0 ),
		polygon ((9, 8, 10),(9, 8, 10), 0 ),
		polygon ((10, 11, 9),(10, 11, 9), 0 ),
		polygon ((11, 10, 12),(11, 10, 12), 0 ),
		polygon ((12, 13, 11),(12, 14, 11), 0 ),
		polygon ((3, 2, 5),(3, 2, 5), 0 ),
		polygon ((5, 4, 3),(5, 4, 3), 0 ),
		polygon ((13, 12, 14),(15, 13, 17), 0 ),
		polygon ((14, 15, 13),(17, 18, 16), 0 ),
		polygon ((16, 17, 18),(19, 20, 21), 0 ),
		polygon ((18, 19, 16),(21, 22, 19), 0 ),
		polygon ((19, 18, 20),(22, 21, 23), 0 ),
		polygon ((20, 21, 19),(23, 24, 22), 0 ),
		polygon ((21, 20, 1),(24, 23, 1), 0 ),
		polygon ((1, 0, 21),(1, 0, 24), 0 ),
		polygon ((15, 14, 22),(18, 17, 25), 0 ),
		polygon ((22, 23, 15),(25, 26, 18), 0 ),
		polygon ((23, 22, 17),(26, 25, 20), 0 ),
		polygon ((17, 16, 23),(20, 19, 26), 0 ),
		polygon ((24, 25, 26),(27, 28, 29), 0 ),
		polygon ((26, 27, 24),(29, 30, 27), 0 ),
		polygon ((28, 29, 30),(31, 32, 33), 0 ),
		polygon ((30, 31, 28),(33, 34, 31), 0 ),
		polygon ((32, 28, 31),(35, 31, 34), 0 ),
		polygon ((31, 33, 32),(34, 36, 35), 0 ),
		polygon ((34, 32, 33),(37, 35, 36), 0 ),
		polygon ((33, 35, 34),(36, 38, 37), 0 ),
		polygon ((36, 34, 35),(39, 37, 38), 0 ),
		polygon ((35, 37, 36),(38, 41, 39), 0 ),
		polygon ((29, 24, 27),(32, 27, 30), 0 ),
		polygon ((27, 30, 29),(30, 33, 32), 0 ),
		polygon ((38, 36, 37),(44, 40, 42), 0 ),
		polygon ((37, 39, 38),(43, 45, 44), 0 ),
		polygon ((40, 41, 42),(46, 47, 48), 0 ),
		polygon ((42, 43, 40),(48, 49, 46), 0 ),
		polygon ((44, 40, 43),(50, 46, 49), 0 ),
		polygon ((43, 45, 44),(49, 51, 50), 0 ),
		polygon ((25, 44, 45),(28, 50, 51), 0 ),
		polygon ((45, 26, 25),(51, 29, 28), 0 ),
		polygon ((46, 38, 39),(52, 44, 45), 0 ),
		polygon ((39, 47, 46),(45, 53, 52), 0 ),
		polygon ((41, 46, 47),(47, 52, 53), 0 ),
		polygon ((47, 42, 41),(53, 48, 47), 0 )
	)
); /* end of polyset 'hoopfire1' */

polyset hoopfire2 (
	active = ON,
	motion_blur = ON,
	smooth = ON,
	doublesided = OFF,
	opposite = OFF,
	shader = (Firetest3 ),
	casts_shadow = TRUE,
	vertices = ((cv((6.784144, 1.915907, -0.115542), 1)),
			(cv((6.748985, 2.368995, -0.242406), 1)),
			(cv((6.627782, 2.368995, -0.20993), 1)),
			(cv((6.726373, 1.915907, -0.100062), 1)),
			(cv((6.684082, 1.915907, -0.057771), 1)),
			(cv((6.539055, 2.368995, -0.121203), 1)),
			(cv((6.506579, 2.368995, 0.0), 1)),
			(cv((6.668602, 1.915907, 0.0), 1)),
			(cv((6.539055, 2.368995, 0.121203), 1)),
			(cv((6.684082, 1.915907, 0.057771), 1)),
			(cv((6.627782, 2.368995, 0.20993), 1)),
			(cv((6.726373, 1.915907, 0.100062), 1)),
			(cv((6.748985, 2.368995, 0.242406), 1)),
			(cv((6.784144, 1.915907, 0.115542), 1)),
			(cv((6.870188, 2.368995, 0.20993), 1)),
			(cv((6.841915, 1.915907, 0.100062), 1)),
			(cv((6.899686, 1.915907, 0.0), 1)),
			(cv((6.991391, 2.368995, 0.0), 1)),
			(cv((6.958915, 2.368995, -0.121203), 1)),
			(cv((6.884206, 1.915907, -0.057771), 1)),
			(cv((6.870188, 2.368995, -0.20993), 1)),
			(cv((6.841915, 1.915907, -0.100062), 1)),
			(cv((6.958915, 2.368995, 0.121203), 1)),
			(cv((6.884206, 1.915907, 0.057771), 1)),
			(cv((6.627782, 2.368995, -0.20993), 1)),
			(cv((6.748985, 2.368995, -0.242406), 1)),
			(cv((6.784144, 1.915907, -0.115542), 1)),
			(cv((6.726373, 1.915907, -0.100062), 1)),
			(cv((6.506579, 2.368995, 0.0), 1)),
			(cv((6.539055, 2.368995, -0.121203), 1)),
			(cv((6.684082, 1.915907, -0.057771), 1)),
			(cv((6.668602, 1.915907, 0.0), 1)),
			(cv((6.539055, 2.368995, 0.121203), 1)),
			(cv((6.684082, 1.915907, 0.057771), 1)),
			(cv((6.627782, 2.368995, 0.20993), 1)),
			(cv((6.726373, 1.915907, 0.100062), 1)),
			(cv((6.748985, 2.368995, 0.242406), 1)),
			(cv((6.784144, 1.915907, 0.115542), 1)),
			(cv((6.870188, 2.368995, 0.20993), 1)),
			(cv((6.841915, 1.915907, 0.100062), 1)),
			(cv((6.958915, 2.368995, -0.121203), 1)),
			(cv((6.991391, 2.368995, 0.0), 1)),
			(cv((6.899686, 1.915907, 0.0), 1)),
			(cv((6.884206, 1.915907, -0.057771), 1)),
			(cv((6.870188, 2.368995, -0.20993), 1)),
			(cv((6.841915, 1.915907, -0.100062), 1)),
			(cv((6.958915, 2.368995, 0.121203), 1)),
			(cv((6.884206, 1.915907, 0.057771), 1))	),
	texture_vertices = (
			st( 0.500000, 0.000000 ),
			st( 0.500000, 1.000000 ),
			st( 0.416666, 1.000000 ),
			st( 0.416666, 0.000000 ),
			st( 0.333330, 0.000000 ),
			st( 0.333330, 1.000000 ),
			st( 0.250000, 1.000000 ),
			st( 0.250000, 0.000000 ),
			st( 0.166667, 1.000000 ),
			st( 0.166667, 0.000000 ),
			st( 0.083333, 1.000000 ),
			st( 0.083333, 0.000000 ),
			st( 0.000000, 1.000000 ),
			st( 1.000000, 1.000000 ),
			st( 0.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 0.916667, 1.000000 ),
			st( 0.916667, 0.000000 ),
			st( 0.750000, 0.000000 ),
			st( 0.750000, 1.000000 ),
			st( 0.666666, 1.000000 ),
			st( 0.666666, 0.000000 ),
			st( 0.583333, 1.000000 ),
			st( 0.583333, 0.000000 ),
			st( 0.833333, 1.000000 ),
			st( 0.833333, 0.000000 ),
			st( 0.416666, 1.000000 ),
			st( 0.500000, 1.000000 ),
			st( 0.500000, 0.000000 ),
			st( 0.416666, 0.000000 ),
			st( 0.250000, 1.000000 ),
			st( 0.333330, 1.000000 ),
			st( 0.333330, 0.000000 ),
			st( 0.250000, 0.000000 ),
			st( 0.166667, 1.000000 ),
			st( 0.166667, 0.000000 ),
			st( 0.083333, 1.000000 ),
			st( 0.083333, 0.000000 ),
			st( 0.000000, 1.000000 ),
			st( 1.000000, 1.000000 ),
			st( 0.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 1.000000, 0.000000 ),
			st( 0.916667, 1.000000 ),
			st( 0.916667, 0.000000 ),
			st( 0.666666, 1.000000 ),
			st( 0.750000, 1.000000 ),
			st( 0.750000, 0.000000 ),
			st( 0.666666, 0.000000 ),
			st( 0.583333, 1.000000 ),
			st( 0.583333, 0.000000 ),
			st( 0.833333, 1.000000 ),
			st( 0.833333, 0.000000 ) ),
	polygons = (
		polygon ((0, 1, 2),(0, 1, 2), 0 ),
		polygon ((2, 3, 0),(2, 3, 0), 0 ),
		polygon ((4, 5, 6),(4, 5, 6), 0 ),
		polygon ((6, 7, 4),(6, 7, 4), 0 ),
		polygon ((7, 6, 8),(7, 6, 8), 0 ),
		polygon ((8, 9, 7),(8, 9, 7), 0 ),
		polygon ((9, 8, 10),(9, 8, 10), 0 ),
		polygon ((10, 11, 9),(10, 11, 9), 0 ),
		polygon ((11, 10, 12),(11, 10, 12), 0 ),
		polygon ((12, 13, 11),(12, 14, 11), 0 ),
		polygon ((3, 2, 5),(3, 2, 5), 0 ),
		polygon ((5, 4, 3),(5, 4, 3), 0 ),
		polygon ((13, 12, 14),(15, 13, 17), 0 ),
		polygon ((14, 15, 13),(17, 18, 16), 0 ),
		polygon ((16, 17, 18),(19, 20, 21), 0 ),
		polygon ((18, 19, 16),(21, 22, 19), 0 ),
		polygon ((19, 18, 20),(22, 21, 23), 0 ),
		polygon ((20, 21, 19),(23, 24, 22), 0 ),
		polygon ((21, 20, 1),(24, 23, 1), 0 ),
		polygon ((1, 0, 21),(1, 0, 24), 0 ),
		polygon ((15, 14, 22),(18, 17, 25), 0 ),
		polygon ((22, 23, 15),(25, 26, 18), 0 ),
		polygon ((23, 22, 17),(26, 25, 20), 0 ),
		polygon ((17, 16, 23),(20, 19, 26), 0 ),
		polygon ((24, 25, 26),(27, 28, 29), 0 ),
		polygon ((26, 27, 24),(29, 30, 27), 0 ),
		polygon ((28, 29, 30),(31, 32, 33), 0 ),
		polygon ((30, 31, 28),(33, 34, 31), 0 ),
		polygon ((32, 28, 31),(35, 31, 34), 0 ),
		polygon ((31, 33, 32),(34, 36, 35), 0 ),
		polygon ((34, 32, 33),(37, 35, 36), 0 ),
		polygon ((33, 35, 34),(36, 38, 37), 0 ),
		polygon ((36, 34, 35),(39, 37, 38), 0 ),
		polygon ((35, 37, 36),(38, 41, 39), 0 ),
		polygon ((29, 24, 27),(32, 27, 30), 0 ),
		polygon ((27, 30, 29),(30, 33, 32), 0 ),
		polygon ((38, 36, 37),(44, 40, 42), 0 ),
		polygon ((37, 39, 38),(43, 45, 44), 0 ),
		polygon ((40, 41, 42),(46, 47, 48), 0 ),
		polygon ((42, 43, 40),(48, 49, 46), 0 ),
		polygon ((44, 40, 43),(50, 46, 49), 0 ),
		polygon ((43, 45, 44),(49, 51, 50), 0 ),
		polygon ((25, 44, 45),(28, 50, 51), 0 ),
		polygon ((45, 26, 25),(51, 29, 28), 0 ),
		polygon ((46, 38, 39),(52, 44, 45), 0 ),
		polygon ((39, 47, 46),(45, 53, 52), 0 ),
		polygon ((41, 46, 47),(47, 52, 53), 0 ),
		polygon ((47, 42, 41),(53, 48, 47), 0 )
	)
); /* end of polyset 'hoopfire2' */

ENVIRONMENT
background ( 
    backdrop = "/disk3/people/mgilmore/user_data/NBAonNBC/pix/black.tif",
        color = (0.0, 0.0, 0.0)
);
shader_glow ( 
,
        glow_type =  LINEAR_GLOW,
        halo_type =  LINEAR_GLOW,
        auto_exposure = ON,
        quality = 0.5,
        threshold = 0.0,
        glow_color = (100.0, 100.0, 100.0),
        glow_intensity = 1.0,
        glow_spread = 0.05,
        glow_eccentricity = 0.1,
        glow_radial_noise = 0.0,
        glow_star_level = 0.0,
        glow_opacity = 0.0,
        halo_color = (100.0, 100.0, 100.0),
        halo_intensity = 1.0,
        halo_spread = 0.3,
        halo_eccentricity = 0.1,
        halo_radial_noise = 0.0,
        halo_star_level = 0.0,
        halo_lens_flare = 0.0,
        rotation = 0.0,
        radial_noise_frequency = 0.5,
        star_points = 4.0
);
photo_effects ( 
,
        film_grain = 0.0,
        filter = (255.0, 255.0, 255.0)
);
master_light ( 
,
        intensity = 1.0,
        light_color = (255.0, 255.0, 255.0)
);
dynamics ( 
,
        gravity = 1.0,
        air_density = 0.05,
        Floor = ON,
        floor_offset = 0.0,
        ceiling = OFF,
        ceiling_offset = 20.0,
        left = OFF,
        left_offset = -10.0,
        right = OFF,
        right_offset = 10.0,
        front = OFF,
        front_offset = -10.0,
        back = OFF,
        back_offset = 10.0,
        wall_friction = 0.0,
        wall_elasticity = 0.707,
        turbulence_intensity = 0.0,
        turbulence_spread = 0.5,
        turbulence_persistence = 5.0,
        turbulence_animated = ON,
        turbulence_space_resolution =  16,
        turbulence_time_resolution =  16,
        turbulence_roughness = 0.5,
        turbulence_variability = 0.5,
        turbulence_granularity = 0.0
);

MODEL
/* Only expression assignments should appear above this line and below the MODEL directive. */
/* Placing any other commands in the above section will produce incorrect expression behaviour. */
{
	instance hoopfire1();
}
{
	instance hoopfire2();
}
{
	{
		trn(0.0, 0.0, 12.0);
		camera (
			perspective = TRUE,
			eye   = ( 0.0,  0.0,  0.0),
			active = ON,
			pix   = "pix/hoopfire.sdl",
			view  = Camera_view,
			up  = Camera_up,
			aov = 55.0,
			filmaperture_x = 0.4,
			filmaperture_y = 0.285,
			filmoffset_x = 0.0,
			filmoffset_y = 0.0,
			placement_fit_code = 0,
			placement_shift = 0.0,
			aspect   = pixel_aspect,
			aspect_ratio_pixel = pixel_aspect,
			near = 0.1,
			far = 200.0,
			depth_of_field = 0.0,
			scaling_factor = 1.0,
			f_stop = 3.5,
			focal_distance = 12.0,
			auto_focus = OFF,
			motion_blur = 0.0
		);
	}
	{
		Camera_view = current_position( (0, 0, 0) );
	}
	{
		trn(0.0, 1.0, 12.0);
		Camera_up = current_position( (0, 0, 0) );
	}
}

